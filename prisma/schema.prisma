// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model HeroImage {
  id        Int      @id @default(autoincrement())
  imageUrl  String   @map("image_url")
  imagePath String?  @map("image_path")
  url       String?  // Optional URL untuk link
  height    Int      @default(400) // Height untuk masonry
  order     Int      @default(0) // Order untuk sorting
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  adminId   Int      @map("admin_id")
  admin     Admin    @relation(fields: [adminId], references: [id])

  @@map("hero_images")
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  role      String   @default("admin") // admin, superadmin, manager
  email     String?  @unique
  name      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime?

  // Relations
  contents Content[]
  projects Project[]
  cabinets Cabinet[]
  films Film[]
  articles Article[]
  heroImages HeroImage[]

  @@map("admins")
}

model Content {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  platform    String   // youtube, instagram, podcast
  url         String?
  thumbnail   String?
  banner      String?  // Banner/gambar untuk promo
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adminId     Int
  admin       Admin    @relation(fields: [adminId], references: [id])

  @@map("contents")
}

model Project {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  category    String?  // film, commercial, documentary
  thumbnail   String?
  videoUrl    String?
  isPublished Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adminId     Int
  admin       Admin    @relation(fields: [adminId], references: [id])

  @@map("projects")
}

model Cabinet {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  status      String   @default("active") // active, inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  adminId     Int
  admin       Admin    @relation(fields: [adminId], references: [id])

  // Relations
  members CabinetMember[]

  @@map("cabinets")
}

model Division {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  code        String   @unique // anf, psdi, psdm, humi, produksi, dea, leadership
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members CabinetMember[]

  @@map("divisions")
}

model CabinetMember {
  id          Int      @id @default(autoincrement())
  name        String
  position    String
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cabinetId   Int
  cabinet     Cabinet  @relation(fields: [cabinetId], references: [id], onDelete: Cascade)
  divisionId  Int
  division    Division @relation(fields: [divisionId], references: [id])

  @@map("cabinet_members")
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  type      String   @default("string") // string, number, boolean, json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

model Film {
  id          Int       @id @default(autoincrement())
  filmTitle   String    @map("film_title")
  duration    Int       // in minutes
  director    String
  releaseYear String    @map("release_year")
  status      FilmStatus @default(coming_soon)
  description String? @db.Text
  posterUrl   String?   @map("poster_url")
  posterPath  String?   @map("poster_path")
  trailerUrl  String?   @map("trailer_url")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  adminId     Int       @map("admin_id")
  admin       Admin     @relation(fields: [adminId], references: [id])

  // Relations
  filmGenres  FilmGenre[]

  @@map("films")
}

model Genre {
  id          Int         @id @default(autoincrement())
  judulGenre  String      @map("judul_genre") @unique
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  // Relations
  filmGenres  FilmGenre[]

  @@map("genres")
}

model FilmGenre {
  id        Int     @id @default(autoincrement())
  filmId    Int     @map("film_id")
  genreId   Int     @map("genre_id")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  film      Film    @relation(fields: [filmId], references: [id], onDelete: Cascade)
  genre     Genre   @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@unique([filmId, genreId])
  @@map("film_genres")
}

enum FilmStatus {
  coming_soon
  now_showing
  archived
}

model ArticleCategory {
  id           Int       @id @default(autoincrement())
  categoryName String    @map("category_name")
  slug         String    @unique
  description  String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  articles Article[]

  @@map("article_categories")
}

model Article {
  id            Int            @id @default(autoincrement())
  title         String
  slug          String         @unique
  author        String
  content       String         @db.Text
  bannerImage   String?        @map("banner_image")
  status        ArticleStatus  @default(draft)
  publishedAt   DateTime?      @map("published_at")
  readTime      Int?           @map("read_time") // in minutes
  viewCount     Int            @default(0) @map("view_count")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  deletedAt     DateTime?      @map("deleted_at")
  
  // Foreign Keys
  categoryId    Int            @map("category_id")
  category      ArticleCategory @relation(fields: [categoryId], references: [id])
  adminId       Int            @map("admin_id")
  admin         Admin          @relation(fields: [adminId], references: [id])

  // Relations
  images        ArticleImage[]

  @@map("articles")
}

model ArticleImage {
  id          Int      @id @default(autoincrement())
  imageUrl    String   @map("image_url")
  imagePath   String   @map("image_path")
  altText     String?  @map("alt_text")
  caption     String?
  order       Int      @default(0)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Foreign Keys
  articleId   Int      @map("article_id")
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@map("article_images")
}

enum ArticleStatus {
  draft
  published
  archived
}
